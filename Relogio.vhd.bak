library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity Atividade11 is
  port (HabPc,HabBanco, CLK: in STD_LOGIC;
		  FUNC : in std_logic_vector(1 downto 0);
  
  Opcode: out std_logic_vector(2 downto 0);
  ULAout: out std_logic_vector(31 downto 0)
  );
end;

architecture behavior of Atividade11 is

	component registradorGenerico
	  port (DIN : in std_logic_vector(4 downto 0);
			 DOUT : out std_logic_vector(4 downto 0);
			 ENABLE : in std_logic;
			 CLK,RST : in std_logic);
	end component;
	
	
signal saida_PC : std_logic_vector(4 downto 0);


	component memoria
	  port (Endereco : in std_logic_vector (4 DOWNTO 0);
           Dado : out std_logic_vector (31 DOWNTO 0)
			 );
	end component;
	
signal M_to_RS,M_to_RT,M_to_RD: std_logic_vector(4 downto 0);
signal M_EXIT : std_logic_vector (31 DOWNTO 0);
	--M_to_RS <= Dado(31 downto 26);
	component bancoRegistradores
	  port (clk        : in std_logic;
--
        enderecoA       : in std_logic_vector(4 downto 0);
        enderecoB       : in std_logic_vector(4 downto 0);
        enderecoC       : in std_logic_vector(4 downto 0);
--
        dadoEscritaC    : in std_logic_vector(31 downto 0);
--
        escreveC        : in std_logic := '0';
        saidaA          : out std_logic_vector(31 downto 0);
        saidaB        : out std_logic_vector(31 downto 0)
			 );
	end component;
signal ENTRADA_ULA_RS,ENTRADA_ULA_RT : std_logic_vector(31 downto 0);

	component SOMADOR
	  port (
		-- Input ports
		A	: in  std_logic_vector(31 DOWNTO 0);
		B	: in   std_logic_vector(31 DOWNTO 0);
		FUNC	: in std_logic_vector(1 DOWNTO 0);

		-- Output ports
		Y	: out std_logic_vector(31 DOWNTO 0);
		Zero	: out std_logic;
		Igual	: out std_logic
			 );
	end component;
signal Dado_RD : std_logic_vector(31 downto 0);
signal zero,igual : std_logic;

begin
--	PC : registradoGenerico port map (
--          DIN  => '0000',
--          DOUT => '0000',
--          ENABLE =>HabPc ,
--          CLK,RST => c1
--        );
	
	ROM : memoria port map(
				Endereco => "00000",
				Dado => M_EXIT
--	M_to_RS => M_EXIT(25 downto 21),
--	M_to_RT => M_EXIT(20 downto 16),
--	M_to_RD => M_EXIT(15 downto 11)
	);
	
	ULA : SOMADOR port map(
	-- Input ports
		A	=> ENTRADA_ULA_RS,
		B	=>   ENTRADA_ULA_RT,
		FUNC	=> FUNC,

		-- Output ports
		Y	=> Dado_RD,
		Zero	=> zero,
		Igual	=> igual
	);
	BANCO : bancoRegistradores port map(
		  clk        => CLK,
--
        enderecoA       => M_EXIT(25 downto 21),
        enderecoB       => M_EXIT(20 downto 16),
        enderecoC       => M_EXIT(15 downto 11),
--
        dadoEscritaC    => Dado_RD,
--
        escreveC   => HabBanco,
        saidaA          => ENTRADA_ULA_RS,
        saidaB        => ENTRADA_ULA_RT
		  );
	ULAout <= Dado_RD;
	
			
end; 